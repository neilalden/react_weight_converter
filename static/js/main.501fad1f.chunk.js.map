{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","count","setCount","grams","setG","kilograms","setKg","ounces","setOz","className","type","placeholder","onChange","event","newValue","kg","oz","toFixed","update","Number","target","value","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAiEeA,MA9Df,WAAgB,IAAD,EACYC,mBAAS,GADrB,mBACPC,EADO,KACAC,EADA,OAEQF,mBAASC,GAFjB,mBAEPE,EAFO,KAEAC,EAFA,OAGaJ,mBAASC,GAHtB,mBAGPI,EAHO,KAGIC,EAHJ,OAIUN,mBAASC,GAJnB,mBAIPM,EAJO,KAICC,EAJD,KAmBd,OACC,yBAAKC,UAAU,OACd,yBAAKA,UAAU,yBACd,wBAAIA,UAAU,yBAAd,oBACA,8BACC,yBAAKA,UAAU,cACd,2BACCC,KAAK,SACLD,UAAU,+BACVE,YAAY,kBACZC,SAAU,SAACC,IAxBF,SAACC,GAEfZ,EAASY,GAGT,IACMC,EAAKD,EAAW,OAChBE,EAAgB,GAAXF,EAGXV,GALUU,EAAW,UAKdG,QAAQ,IACfX,EAAMS,EAAGE,QAAQ,IACjBT,EAAMQ,EAAGC,QAAQ,IAaXC,CAAOC,OAAON,EAAMO,OAAOC,aAK/B,yBAAKC,GAAG,UACP,yBAAKb,UAAU,wBACd,yBAAKA,UAAU,aACd,uCACA,yBAAKa,GAAG,eAAenB,KAIzB,yBAAKM,UAAU,wBACd,yBAAKA,UAAU,aACd,2CACA,yBAAKa,GAAG,YAAYjB,KAItB,yBAAKI,UAAU,wBACd,yBAAKA,UAAU,cACd,wCACA,yBAAKa,GAAG,YAAYf,SC5CPgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.501fad1f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst [count, setCount] = useState(0);\n\tconst [grams, setG] = useState(count);\n\tconst [kilograms, setKg] = useState(count);\n\tconst [ounces, setOz] = useState(count);\n\tconst update = (newValue) => {\n\t\t// update current value\n\t\tsetCount(newValue);\n\n\t\t// formula for each convertion\n\t\tconst g = newValue / 0.0022046;\n\t\tconst kg = newValue / 2.2046;\n\t\tconst oz = newValue * 16;\n\n\t\t// update converted values\n\t\tsetG(g.toFixed(2));\n\t\tsetKg(kg.toFixed(2));\n\t\tsetOz(oz.toFixed(2));\n\t};\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"col-md-6 center-block\">\n\t\t\t\t<h1 className=\"display-4 text-center\">weight converter</h1>\n\t\t\t\t<form>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tclassName=\"form-control form-control-lg\"\n\t\t\t\t\t\t\tplaceholder=\"Enter Pounds...\"\n\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\tupdate(Number(event.target.value));\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<div id=\"output\">\n\t\t\t\t\t<div className=\"card bg-primary mb-2\">\n\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t<h4>Grams: </h4>\n\t\t\t\t\t\t\t<div id=\"gramsOutput\">{grams}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"card bg-success mb-2\">\n\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t<h4>Kilograms: </h4>\n\t\t\t\t\t\t\t<div id=\"kgOutput\">{kilograms}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"card bg-warning mb-2\">\n\t\t\t\t\t\t<div className=\"card-body \">\n\t\t\t\t\t\t\t<h4>Ounces: </h4>\n\t\t\t\t\t\t\t<div id=\"ozOutput\">{ounces}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}